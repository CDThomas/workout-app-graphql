# source: http://localhost:4466
# timestamp: Sun Sep 09 2018 15:14:27 GMT+1000 (Australian Eastern Standard Time)

type AggregateExercise {
  count: Int!
}

type AggregateRoutine {
  count: Int!
}

type AggregateRoutineSet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Exercise implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ExerciseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExerciseEdge]!
  aggregate: AggregateExercise!
}

input ExerciseCreateInput {
  name: String!
}

input ExerciseCreateOneInput {
  create: ExerciseCreateInput
  connect: ExerciseWhereUniqueInput
}

"""An edge in a connection."""
type ExerciseEdge {
  """The item at the end of the edge."""
  node: Exercise!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExerciseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExercisePreviousValues {
  id: ID!
  name: String!
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
  updatedFields: [String!]
  previousValues: ExercisePreviousValues
}

input ExerciseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExerciseWhereInput
}

input ExerciseUpdateDataInput {
  name: String
}

input ExerciseUpdateInput {
  name: String
}

input ExerciseUpdateOneInput {
  create: ExerciseCreateInput
  connect: ExerciseWhereUniqueInput
  delete: Boolean
  update: ExerciseUpdateDataInput
  upsert: ExerciseUpsertNestedInput
}

input ExerciseUpsertNestedInput {
  update: ExerciseUpdateDataInput!
  create: ExerciseCreateInput!
}

input ExerciseWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input ExerciseWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createRoutine(data: RoutineCreateInput!): Routine!
  createRoutineSet(data: RoutineSetCreateInput!): RoutineSet!
  createUser(data: UserCreateInput!): User!
  createExercise(data: ExerciseCreateInput!): Exercise!
  updateRoutine(data: RoutineUpdateInput!, where: RoutineWhereUniqueInput!): Routine
  updateRoutineSet(data: RoutineSetUpdateInput!, where: RoutineSetWhereUniqueInput!): RoutineSet
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateExercise(data: ExerciseUpdateInput!, where: ExerciseWhereUniqueInput!): Exercise
  deleteRoutine(where: RoutineWhereUniqueInput!): Routine
  deleteRoutineSet(where: RoutineSetWhereUniqueInput!): RoutineSet
  deleteUser(where: UserWhereUniqueInput!): User
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  upsertRoutine(where: RoutineWhereUniqueInput!, create: RoutineCreateInput!, update: RoutineUpdateInput!): Routine!
  upsertRoutineSet(where: RoutineSetWhereUniqueInput!, create: RoutineSetCreateInput!, update: RoutineSetUpdateInput!): RoutineSet!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertExercise(where: ExerciseWhereUniqueInput!, create: ExerciseCreateInput!, update: ExerciseUpdateInput!): Exercise!
  updateManyRoutines(data: RoutineUpdateInput!, where: RoutineWhereInput): BatchPayload!
  updateManyRoutineSets(data: RoutineSetUpdateInput!, where: RoutineSetWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyExercises(data: ExerciseUpdateInput!, where: ExerciseWhereInput): BatchPayload!
  deleteManyRoutines(where: RoutineWhereInput): BatchPayload!
  deleteManyRoutineSets(where: RoutineSetWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyExercises(where: ExerciseWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  routines(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Routine]!
  routineSets(where: RoutineSetWhereInput, orderBy: RoutineSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoutineSet]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise]!
  routine(where: RoutineWhereUniqueInput!): Routine
  routineSet(where: RoutineSetWhereUniqueInput!): RoutineSet
  user(where: UserWhereUniqueInput!): User
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  routinesConnection(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoutineConnection!
  routineSetsConnection(where: RoutineSetWhereInput, orderBy: RoutineSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoutineSetConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  exercisesConnection(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Routine implements Node {
  id: ID!
  name: String!
  creator(where: UserWhereInput): User!
  sets(where: RoutineSetWhereInput, orderBy: RoutineSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoutineSet!]
}

"""A connection to a list of items."""
type RoutineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoutineEdge]!
  aggregate: AggregateRoutine!
}

input RoutineCreateInput {
  name: String!
  creator: UserCreateOneInput!
  sets: RoutineSetCreateManyWithoutRoutineInput
}

input RoutineCreateOneWithoutSetsInput {
  create: RoutineCreateWithoutSetsInput
  connect: RoutineWhereUniqueInput
}

input RoutineCreateWithoutSetsInput {
  name: String!
  creator: UserCreateOneInput!
}

"""An edge in a connection."""
type RoutineEdge {
  """The item at the end of the edge."""
  node: Routine!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoutineOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoutinePreviousValues {
  id: ID!
  name: String!
}

type RoutineSet implements Node {
  id: ID!
  routine(where: RoutineWhereInput): Routine!
  exercise(where: ExerciseWhereInput): Exercise!
  setCount: Int!
  repCount: Int!
}

"""A connection to a list of items."""
type RoutineSetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoutineSetEdge]!
  aggregate: AggregateRoutineSet!
}

input RoutineSetCreateInput {
  setCount: Int
  repCount: Int
  routine: RoutineCreateOneWithoutSetsInput!
  exercise: ExerciseCreateOneInput!
}

input RoutineSetCreateManyWithoutRoutineInput {
  create: [RoutineSetCreateWithoutRoutineInput!]
  connect: [RoutineSetWhereUniqueInput!]
}

input RoutineSetCreateWithoutRoutineInput {
  setCount: Int
  repCount: Int
  exercise: ExerciseCreateOneInput!
}

"""An edge in a connection."""
type RoutineSetEdge {
  """The item at the end of the edge."""
  node: RoutineSet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoutineSetOrderByInput {
  id_ASC
  id_DESC
  setCount_ASC
  setCount_DESC
  repCount_ASC
  repCount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoutineSetPreviousValues {
  id: ID!
  setCount: Int!
  repCount: Int!
}

type RoutineSetSubscriptionPayload {
  mutation: MutationType!
  node: RoutineSet
  updatedFields: [String!]
  previousValues: RoutineSetPreviousValues
}

input RoutineSetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineSetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineSetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineSetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoutineSetWhereInput
}

input RoutineSetUpdateInput {
  setCount: Int
  repCount: Int
  routine: RoutineUpdateOneWithoutSetsInput
  exercise: ExerciseUpdateOneInput
}

input RoutineSetUpdateManyWithoutRoutineInput {
  create: [RoutineSetCreateWithoutRoutineInput!]
  connect: [RoutineSetWhereUniqueInput!]
  disconnect: [RoutineSetWhereUniqueInput!]
  delete: [RoutineSetWhereUniqueInput!]
  update: [RoutineSetUpdateWithWhereUniqueWithoutRoutineInput!]
  upsert: [RoutineSetUpsertWithWhereUniqueWithoutRoutineInput!]
}

input RoutineSetUpdateWithoutRoutineDataInput {
  setCount: Int
  repCount: Int
  exercise: ExerciseUpdateOneInput
}

input RoutineSetUpdateWithWhereUniqueWithoutRoutineInput {
  where: RoutineSetWhereUniqueInput!
  data: RoutineSetUpdateWithoutRoutineDataInput!
}

input RoutineSetUpsertWithWhereUniqueWithoutRoutineInput {
  where: RoutineSetWhereUniqueInput!
  update: RoutineSetUpdateWithoutRoutineDataInput!
  create: RoutineSetCreateWithoutRoutineInput!
}

input RoutineSetWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineSetWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineSetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineSetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  setCount: Int

  """All values that are not equal to given value."""
  setCount_not: Int

  """All values that are contained in given list."""
  setCount_in: [Int!]

  """All values that are not contained in given list."""
  setCount_not_in: [Int!]

  """All values less than the given value."""
  setCount_lt: Int

  """All values less than or equal the given value."""
  setCount_lte: Int

  """All values greater than the given value."""
  setCount_gt: Int

  """All values greater than or equal the given value."""
  setCount_gte: Int
  repCount: Int

  """All values that are not equal to given value."""
  repCount_not: Int

  """All values that are contained in given list."""
  repCount_in: [Int!]

  """All values that are not contained in given list."""
  repCount_not_in: [Int!]

  """All values less than the given value."""
  repCount_lt: Int

  """All values less than or equal the given value."""
  repCount_lte: Int

  """All values greater than the given value."""
  repCount_gt: Int

  """All values greater than or equal the given value."""
  repCount_gte: Int
  routine: RoutineWhereInput
  exercise: ExerciseWhereInput
}

input RoutineSetWhereUniqueInput {
  id: ID
}

type RoutineSubscriptionPayload {
  mutation: MutationType!
  node: Routine
  updatedFields: [String!]
  previousValues: RoutinePreviousValues
}

input RoutineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoutineWhereInput
}

input RoutineUpdateInput {
  name: String
  creator: UserUpdateOneInput
  sets: RoutineSetUpdateManyWithoutRoutineInput
}

input RoutineUpdateOneWithoutSetsInput {
  create: RoutineCreateWithoutSetsInput
  connect: RoutineWhereUniqueInput
  delete: Boolean
  update: RoutineUpdateWithoutSetsDataInput
  upsert: RoutineUpsertWithoutSetsInput
}

input RoutineUpdateWithoutSetsDataInput {
  name: String
  creator: UserUpdateOneInput
}

input RoutineUpsertWithoutSetsInput {
  update: RoutineUpdateWithoutSetsDataInput!
  create: RoutineCreateWithoutSetsInput!
}

input RoutineWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  creator: UserWhereInput
  sets_every: RoutineSetWhereInput
  sets_some: RoutineSetWhereInput
  sets_none: RoutineSetWhereInput
}

input RoutineWhereUniqueInput {
  id: ID
}

type Subscription {
  routine(where: RoutineSubscriptionWhereInput): RoutineSubscriptionPayload
  routineSet(where: RoutineSetSubscriptionWhereInput): RoutineSetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  exercise(where: ExerciseSubscriptionWhereInput): ExerciseSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
}

input UserUpdateInput {
  name: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
